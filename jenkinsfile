properties([parameters([choice(choices: ['Nginx', 'Tomcat', 'Both', 'Java', 'mysql', 'postgresql'], name: 'Roles'), choice(choices: ['Ubuntu', 'CentOS', 'Both'], name: 'OS')]), pipelineTriggers([githubPush()])])
pipeline{
    agent any
    stages{
     
        stage('SCM checkout'){
            steps{
                 git 'https://github.com/rahulmittal123/roles.git'
            }
        }
        stage('Execute ansible playbook'){
            steps{
                 script {
                    if (env.Roles == 'Nginx' && env.OS == 'Ubuntu') 
                        {
                        ansiblePlaybook credentialsId: 'private-key-ec2user', disableHostKeyChecking: true, installation: 'ansible', inventory: 'inventory-ubuntu', playbook: 'site.yml'
                        }
                    if (env.Roles == 'Tomcat' && env.OS == 'Ubuntu') 
                        {
                        ansiblePlaybook credentialsId: 'private-key-ec2user', disableHostKeyChecking: true, installation: 'ansible', inventory: 'inventory-ubuntu', playbook: 'tom.yml'
                        }
                    if (env.Roles == 'Both' && env.OS == 'Ubuntu') 
                        {
                        ansiblePlaybook credentialsId: 'private-key-ec2user', disableHostKeyChecking: true, installation: 'ansible', inventory: 'inventory-ubuntu', playbook: 'both.yml'
                        }
                    if (env.Roles == 'Java' && env.OS == 'Ubuntu') 
                        {
                        ansiblePlaybook credentialsId: 'private-key-ec2user', disableHostKeyChecking: true, installation: 'ansible', inventory: 'inventory-ubuntu', playbook: 'java.yml'
                        }
                    if (env.Roles == 'Nginx' && env.OS == 'CentOS') 
                        {
                        ansiblePlaybook credentialsId: 'private-key', disableHostKeyChecking: true, installation: 'Ansible', inventory: 'inventory-centos', playbook: 'site.yml'
                        //  ansiblePlaybook become: true, credentialsId: 'private-key', disableHostKeyChecking: true, installation: 'Ansible', inventory: 'inventory-centos', playbook: 'site.yml', sudo: true
                        }
                    if (env.Roles == 'Tomcat' && env.OS == 'CentOS') 
                        {
                        ansiblePlaybook credentialsId: 'private-key', disableHostKeyChecking: true, installation: 'Ansible', inventory: 'inventory-centos', playbook: 'tom.yml'
                        }
                    if (env.Roles == 'Both' && env.OS == 'CentOS') 
                        {
                        ansiblePlaybook credentialsId: 'private-key-ec2user', disableHostKeyChecking: true, installation: 'ansible', inventory: 'inventory-centos', playbook: 'both.yml'
                        }
                    if (env.Roles == 'Java' && env.OS == 'CentOS') 
                        {
                        ansiblePlaybook credentialsId: 'private-key-ec2user', disableHostKeyChecking: true, installation: 'ansible', inventory: 'inventory-centos', playbook: 'java.yml'
                        }
                    if (env.Roles == 'Nginx' && env.OS == 'Both') 
                        {
                        ansiblePlaybook credentialsId: 'private-key-ec2user', disableHostKeyChecking: true, installation: 'ansible', inventory: 'inventory', playbook: 'site.yml'
                        }
                    if (env.Roles == 'Tomcat' && env.OS == 'Both') 
                        {
                        ansiblePlaybook credentialsId: 'private-key-ec2user', disableHostKeyChecking: true, installation: 'ansible', inventory: 'inventory', playbook: 'tom.yml'
                        }
                    if (env.Roles == 'Both' && env.OS == 'Both') 
                        {
                        ansiblePlaybook credentialsId: 'private-key-ec2user', disableHostKeyChecking: true, installation: 'ansible', inventory: 'inventory', playbook: 'both.yml'
                        }
                    if (env.Roles == 'Java' && env.OS == 'Both') 
                        {
                        ansiblePlaybook credentialsId: 'private-key-ec2user', disableHostKeyChecking: true, installation: 'ansible', inventory: 'inventory', playbook: 'java.yml'
                        }
                    if (env.Roles == 'mysql' && env.OS == 'Ubuntu') 
                        {
                        ansiblePlaybook credentialsId: 'private-key-ec2user', disableHostKeyChecking: true, installation: 'ansible', inventory: 'inventory-ubuntu', playbook: 'mysql.yml'
                        }
                    if (env.Roles == 'postgresql' && env.OS == 'Ubuntu') 
                        {
                        ansiblePlaybook credentialsId: 'private-key-ec2user', disableHostKeyChecking: true, installation: 'ansible', inventory: 'inventory-ubuntu', playbook: 'postgres.yml'
                        }
                    if (env.Roles == 'mysql' && env.OS == 'CentOS') 
                        {
                        ansiblePlaybook credentialsId: 'private-key-ec2user', disableHostKeyChecking: true, installation: 'ansible', inventory: 'inventory-centos', playbook: 'mysql.yml'
                        }
                    if (env.Roles == 'postgresql' && env.OS == 'CentOS') 
                        {
                        ansiblePlaybook credentialsId: 'private-key-ec2user', disableHostKeyChecking: true, installation: 'ansible', inventory: 'inventory-centos', playbook: 'postgres.yml'
                        }
                    if (env.Roles == 'mysql' && env.OS == 'Both') 
                        {
                        ansiblePlaybook credentialsId: 'private-key-ec2user', disableHostKeyChecking: true, installation: 'ansible', inventory: 'inventory', playbook: 'mysql.yml'
                        }
                    if (env.Roles == 'postgresql' && env.OS == 'Both') 
                        {
                        ansiblePlaybook credentialsId: 'private-key-ec2user', disableHostKeyChecking: true, installation: 'ansible', inventory: 'inventory', playbook: 'postgres.yml'
                        }
            }
        }
    }
}
}
